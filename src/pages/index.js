import React from "react"
import Layout from "../components/layout"
import SEO from "../components/seo"

const IndexPage = ({ data }) => {
  const advices = data.allContentfulAdvice.edges.map((edge) => edge.node);
  const image = data.allContentfulMainImage.edges.map((edge) => edge.node);
  // const conclusion = data.allContentfulConclusion.edges.map((edge) => edge.node);
  return (
    <Layout>
      <SEO title="Home" />
      <div style={{ marginBottom: `1.45rem` }}>
        <div className="headLiner" style={{float:`right`}}>
        <p style={{backgroundColor:'#ff5678', width: `240px`, padding: `15px`, position: `relative`, left:`80px`}}>–ë—ã—Å—Ç—Ä—ã–π —á–µ–∫–∞–ø –æ—Ç –Ω–∞—É–∫–∏</p>
          <img src={image[0].pic.file.url} alt="img" width='300px' height='300px' style={{margin: `50px`}}/>
          </div>
        <ul>
          {advices.map((advice, index) => {
            return <li key={index}>{advice.description}</li>
          })}</ul>
        <p style={{font: `italic`}}>–¢–ò–ü–ê –ò–¢–û–ì–ò.</p>
        <p><b>C—Ç—Ä–∞–π–∫ –∏–∑ –≤—Å–µ—Ö –ø—É–Ω–∫—Ç–æ–≤?</b> -  <span role="img" aria-label="rocket">üöÄ</span> –ø–æ–∑–¥—Ä–∞–≤–ª—è—é, –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π —Å—á–∞—Å—Ç–ª–∏–≤—á–∏–∫!</p>
        <p><b>–ú–µ–Ω—å—à–µ —Ç—Ä–µ—Ç–∏ –ø—É–Ω–∫—Ç–æ–≤?</b> -  <span role="img" aria-label="hammer">üî®</span> —Ç–µ–ø–µ—Ä—å –∑–Ω–∞–µ—à—å, –Ω–∞–¥ —á–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å!</p>
        <p><b>–í—Ä–æ–¥–µ –≤—Å–µ –≤—ã–ø–æ–ª–Ω—è–µ—à—å, –Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–µ –æ—á?</b> -  <span role="img" aria-label="sos">üÜò</span> –≤–æ–∑–º–æ–∂–Ω–æ, —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –ø—Å–∏—Ö–æ–ª–æ–≥–∞.</p>
        {/* <div>{conclusion[0].childContentfulConclusionDescriptionRichTextNode.description}</div> */}
      </div>
    </Layout>
  );
}

export default IndexPage
export const indexPageQuery = graphql`
  query IndexPageQuery {
    allContentfulMainImage {
      edges {
        node {
          pic {
            file {
              url
            }
          }
        }
      }
    }
    allContentfulConclusion {
      edges {
        node {
          childContentfulConclusionDescriptionRichTextNode {
            description
          }
        }
      }
    }
    allContentfulAdvice {
      edges {
        node {
          description
        }
      }
    }
  }
`